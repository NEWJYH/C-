using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Basic._07_클래스._01_클래스
{
    class MyClass
    {
        // MyClass의 필드를 정의
        public int variable;
        // public : 접근 제한자입니다.
        // 외부에서 해당하는 멤버를 직접적으로 사용할 수 있도록 하기 위하여 작성

        // 클래스의 필드는 초기화를 하지 않아도 됩니다.
        // 초기화를 하지 않았을 경우 값 타입이라면 0, 참조타입이라면 null을 갖게 됩니다.

        // MyClass의 메서드를 정의합니다.
        public void PrintVariable()
        {
            Console.WriteLine("variable의 값은 " + variable);
        }
    }

    class _01_클래스
    {
        static void Main()
        {
            // 클래스란?
            // 클래스는 특정한 종류의 객체를 만들기 위한 수단입니다.
            // 데이터와 메서드를 묶는 집합이며, 하나의 데이터 타입입니다.
            // 다른 기본 데이터 형식과 다르게 클래스는 복합 데이터 형식임과 동시에 참조 형식입니다.
            // 기본 데이터 형식만으로는 나타낼 수 없는 복잡한 데이터를 표현할 때 사용

            // 복합 데이터 형식이란?
            // 기본 데이터 형식을 조합하여 만든 새로운 타입을 의미

            // 클래스는 필드와 메서드로 이루어져있습니다.
            // 필드 : 클래스 내부에 선언된 멤버 변수들을 의미
            // 멤버 : 클래스 내부에 선언된 요소들을 의미
            //        (필드, 메서드, 프로퍼티, 이벤트, 인덱서 등등)

            // 클래스는 class 키워드를 이용하여 선언하며, 해당 클래스 형식의 변수를 선언할 때
            // 사용할 이름을 바로 뒤에 작성합니다.

            // 객체 : 어떤 특정한 형태로 만들어진 결과를 의미
            // 이렇게 만들어진 클래스는 객체가 아닙니다.
            // 객체를 만들기 위한 수단입니다.

            // MyClass 형식의 객체를 생성
            MyClass mc = new MyClass();
            // MyClass 타입의 객체를 힙에 동적할당하고
            // 스택에 할당된 mc 변수가 힙에 있는 객체를 가리키도록(참조) 합니다.

            // 동적할당이란?
            // 런타임(실행시간) 중에 메모리 할당이 이루어지는 것을 의미하며,
            // 동적할당으로 생성된 메모리는 힙에 할당됩니다.

            // new MyClass();
            // MyClass()의 생성자를 호출하며, 생성된 객체를 반환합니다.
            // new 연산자 : 참조타입의 경우 힙 메모리에 객체를 생성
            //              값 타입이라면 해당 형식의 객체를 스택에 생성

            // 생성된 MyClass 타입의 객체의 멤버를 사용하는 방법?
            // 멤버접근연산자 . 을 사용

            mc.variable = 10;
            mc.PrintVariable();
        }
    }
}
